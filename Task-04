#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LINE_LENGTH 1000

void compress(FILE *input_file, FILE *output_file) {
    char ch, prev_ch;
    int count;

    prev_ch = fgetc(input_file);
    if (prev_ch == EOF) return;  

    count = 1;  

    while ((ch = fgetc(input_file)) != EOF) {
        if (ch == prev_ch) {
            count++;
        } else {
            fprintf(output_file, "%d%c", count, prev_ch);
            prev_ch = ch;  
            count = 1;  
        }
    }
    
    fprintf(output_file, "%d%c", count, prev_ch);
}

void decompress(FILE *input_file, FILE *output_file) {
    int count;
    char ch;

    while (fscanf(input_file, "%d%c", &count, &ch) != EOF) {
        for (int i = 0; i < count; i++) {
            fputc(ch, output_file);
        }
    }
}

int main() {
    int choice;
    FILE *input_file, *output_file;
    char input_filename[MAX_LINE_LENGTH], output_filename[MAX_LINE_LENGTH];

    printf("Run-Length Encoding (RLE) Compression Tool\n");
    printf("1. Compress a file\n");
    printf("2. Decompress a file\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    printf("Enter the input file name: ");
    scanf("%s", input_filename);
    printf("Enter the output file name: ");
    scanf("%s", output_filename);

    input_file = fopen(input_filename, "r");
    if (input_file == NULL) {
        printf("Error opening input file.\n");
        return 1;
    }

    output_file = fopen(output_filename, "w");
    if (output_file == NULL) {
        printf("Error opening output file.\n");
        fclose(input_file);
        return 1;
    }

    switch (choice) {
        case 1:
            compress(input_file, output_file);
            printf("File compressed successfully.\n");
            break;
        case 2:
            decompress(input_file, output_file);
            printf("File decompressed successfully.\n");
            break;
        default:
            printf("Invalid choice.\n");
    }

    fclose(input_file);
    fclose(output_file);
    return 0;
}
